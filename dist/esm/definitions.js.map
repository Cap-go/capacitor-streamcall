{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * @interface LoginOptions\n * @description Configuration options for logging into the Stream Video service\n * @property {string} token - Stream Video API token for authentication\n * @property {string} userId - Unique identifier for the current user\n * @property {string} name - Display name for the current user\n * @property {string} [imageURL] - Avatar URL for the current user\n * @property {string} apiKey - Stream Video API key for your application\n * @property {string} [magicDivId] - DOM element ID where video will be rendered\n */\nexport interface LoginOptions {\n  /** Stream Video API token */\n  token: string;\n  /** User ID for the current user */\n  userId: string;\n  /** Display name for the current user */\n  name: string;\n  /** Optional avatar URL for the current user */\n  imageURL?: string;\n  /** Stream Video API key */\n  apiKey: string;\n  /** ID of the HTML element where the video will be rendered */\n  magicDivId?: string;\n  pushNotificationsConfig?: PushNotificationsConfig;\n}\n\nexport interface PushNotificationsConfig {\n  pushProviderName: string;\n  voipProviderName: string;\n}\n\n/**\n * @typedef CallState\n * @description Represents all possible call states from API and UI\n */\nexport type CallState =\n  // User-facing states\n  | 'idle'\n  | 'ringing'\n  | 'joining'\n  | 'reconnecting'\n  | 'joined'\n  | 'leaving'\n  | 'left'\n  // Event-specific states\n  | 'created'\n  | 'session_started'\n  | 'rejected'\n  | 'participant_counts'\n  | 'missed'\n  | 'accepted'\n  | 'ended'\n  | 'camera_enabled'\n  | 'camera_disabled'\n  | 'speaker_enabled'\n  | 'speaker_disabled'\n  | 'microphone_enabled'\n  | 'microphone_disabled'\n  | 'outgoing_call_ended'\n  | 'unknown';\n\n/**\n * @typedef CallType\n * @description Represents the pre-defined types of a call.\n * - `default`: Simple 1-1 or group video calling with sensible defaults. Video/audio enabled, backstage disabled. Admins/hosts have elevated permissions.\n * - `audio_room`: For audio-only spaces (like Clubhouse). Backstage enabled (requires `goLive`), pre-configured permissions for requesting to speak.\n * - `livestream`: For one-to-many streaming. Backstage enabled (requires `goLive`), access granted to all authenticated users.\n * - `development`: For testing ONLY. All permissions enabled, backstage disabled. **Not recommended for production.**\n */\nexport type CallType = 'default' | 'audio' | 'audio_room' | 'livestream' | 'development';\n\n/**\n * @interface CallMember\n * @description Information about a call member/participant\n * @property {string} userId - User ID of the member\n * @property {string} [name] - Display name of the user\n * @property {string} [imageURL] - Profile image URL of the user\n * @property {string} [role] - Role of the user in the call\n */\nexport interface CallMember {\n  /** User ID of the member */\n  userId: string;\n  /** Display name of the user */\n  name?: string;\n  /** Profile image URL of the user */\n  imageURL?: string;\n  /** Role of the user in the call */\n  role?: string;\n}\n\n/**\n * @interface CallEvent\n * @description Event emitted when call state changes\n * @property {string} callId - Unique identifier of the call\n * @property {CallState} state - Current state of the call\n * @property {string} [userId] - User ID of the participant who triggered the event\n * @property {string} [reason] - Reason for the call state change\n * @property {CallMember} [caller] - Information about the caller (for incoming calls)\n * @property {CallMember[]} [members] - List of call members\n */\nexport interface CallEvent {\n  /** ID of the call */\n  callId: string;\n  /** Current state of the call */\n  state: CallState;\n  /** User ID of the participant in the call who triggered the event */\n  userId?: string;\n  /** Reason for the call state change, if applicable */\n  reason?: string;\n  /** Information about the caller (for incoming calls) */\n  caller?: CallMember;\n  /** List of call members */\n  members?: CallMember[];\n\n  custom?: Record<\n    string,\n    | string\n    | boolean\n    | number\n    | null\n    | Record<string, string | boolean | number | null>\n    | string[]\n    | boolean[]\n    | number[]\n  >;\n\n  count?: number;\n}\n\nexport interface CameraEnabledResponse {\n  enabled: boolean;\n}\n\n/**\n * @interface DynamicApiKeyResponse\n * @description Response from getDynamicStreamVideoApikey\n * @property {string|null} apiKey - The dynamic API key if set, null if not\n * @property {boolean} hasDynamicKey - Whether a dynamic key is currently set\n */\nexport interface DynamicApiKeyResponse {\n  /** The dynamic API key if set, null if not */\n  apiKey: string | null;\n  /** Whether a dynamic key is currently set */\n  hasDynamicKey: boolean;\n}\n\n/**\n * @interface CurrentUserResponse\n * @description Response from getCurrentUser containing user information\n * @property {string} userId - User ID of the current user\n * @property {string} name - Display name of the current user\n * @property {string} [imageURL] - Avatar URL of the current user\n * @property {boolean} isLoggedIn - Whether the user is currently logged in\n */\nexport interface CurrentUserResponse {\n  /** User ID of the current user */\n  userId: string;\n  /** Display name of the current user */\n  name: string;\n  /** Avatar URL of the current user */\n  imageURL?: string;\n  /** Whether the user is currently logged in */\n  isLoggedIn: boolean;\n}\n\n/**\n * @interface SuccessResponse\n * @description Standard response indicating operation success/failure\n * @property {boolean} success - Whether the operation succeeded\n */\nexport interface SuccessResponse {\n  /** Whether the operation was successful */\n  success: boolean;\n  callId?: string;\n}\n\n/**\n * @interface CallOptions\n * @description Options for initiating a video call\n * @property {string[]} userIds - IDs of the users to call\n * @property {CallType} [type=default] - Type of call\n * @property {boolean} [ring=true] - Whether to send ring notification\n * @property {string} [team] - Team name to call\n */\nexport interface CallOptions {\n  /** User ID of the person to call */\n  userIds: string[];\n  /** Type of call, defaults to 'default' */\n  type?: CallType;\n  /** Whether to ring the other user, defaults to true */\n  ring?: boolean;\n  /** Team name to call */\n  team?: string;\n  /** Whether to start the call with video enabled, defaults to false */\n  video?: boolean;\n  /** Custom data to be passed to the call */\n  custom?: Record<\n    string,\n    | string\n    | boolean\n    | number\n    | null\n    | Record<string, string | boolean | number | null>\n    | string[]\n    | boolean[]\n    | number[]\n  >;\n}\n\n/**\n * @interface StreamCallPlugin\n * @description Capacitor plugin for Stream Video calling functionality\n */\nexport interface StreamCallPlugin {\n  /**\n   * Login to Stream Video service\n   * @param {LoginOptions} options - Login configuration\n   * @returns {Promise<SuccessResponse>} Success status\n   * @example\n   * await StreamCall.login({\n   *   token: 'your-token',\n   *   userId: 'user-123',\n   *   name: 'John Doe',\n   *   apiKey: 'your-api-key'\n   * });\n   */\n  login(options: LoginOptions): Promise<SuccessResponse>;\n\n  /**\n   * Logout from Stream Video service\n   * @returns {Promise<SuccessResponse>} Success status\n   * @example\n   * await StreamCall.logout();\n   */\n  logout(): Promise<SuccessResponse>;\n\n  /**\n   * Initiate a call to another user\n   * @param {CallOptions} options - Call configuration\n   * @returns {Promise<SuccessResponse>} Success status\n   * @example\n   * await StreamCall.call({\n   *   userId: 'user-456',\n   *   type: 'video',\n   *   ring: true\n   * });\n   */\n  call(options: CallOptions): Promise<SuccessResponse>;\n\n  /**\n   * End the current call\n   * @returns {Promise<SuccessResponse>} Success status\n   * @example\n   * await StreamCall.endCall();\n   */\n  endCall(): Promise<SuccessResponse>;\n\n\n  /**\n   * Join an existing call\n   * @param {{  callId: string, callType: string  }} options - Microphone state\n   * @returns {Promise<SuccessResponse>} Success status\n   * @example\n   * await StreamCall.joinCall({ callId: 'call001', callType: 'default' });\n   */\n  joinCall?(options: { callId: string, callType: string }): Promise<SuccessResponse>;\n\n\n  /**\n   * Enable or disable microphone\n   * @param {{ enabled: boolean }} options - Microphone state\n   * @returns {Promise<SuccessResponse>} Success status\n   * @example\n   * await StreamCall.setMicrophoneEnabled({ enabled: false });\n   */\n  setMicrophoneEnabled(options: { enabled: boolean }): Promise<SuccessResponse>;\n\n  /**\n   * Enable or disable camera\n   * @param {{ enabled: boolean }} options - Camera state\n   * @returns {Promise<SuccessResponse>} Success status\n   * @example\n   * await StreamCall.setCameraEnabled({ enabled: false });\n   */\n  setCameraEnabled(options: { enabled: boolean }): Promise<SuccessResponse>;\n\n  /**\n   * Add listener for call events\n   * @param {'callEvent'} eventName - Name of the event to listen for\n   * @param {(event: CallEvent) => void} listenerFunc - Callback function\n   * @returns {Promise<{ remove: () => Promise<void> }>} Function to remove listener\n   * @example\n   * const listener = await StreamCall.addListener('callEvent', (event) => {\n   *   console.log(`Call ${event.callId} is now ${event.state}`);\n   * });\n   */\n  addListener(\n    eventName: 'callEvent',\n    listenerFunc: (event: CallEvent) => void,\n  ): Promise<{ remove: () => Promise<void> }>;\n\n  /**\n   * Listen for lock-screen incoming call (Android only).\n   * Fired when the app is shown by full-screen intent before user interaction.\n   */\n  addListener(\n    eventName: 'incomingCall',\n    listenerFunc: (event: IncomingCallPayload) => void,\n  ): Promise<{ remove: () => Promise<void> }>;\n\n  /**\n   * Remove all event listeners\n   * @returns {Promise<void>}\n   * @example\n   * await StreamCall.removeAllListeners();\n   */\n  removeAllListeners(): Promise<void>;\n\n  /**\n   * Enable bluetooth audio\n   * @returns {Promise<SuccessResponse>} Success status\n   * @example\n   * await StreamCall.enableBluetooth();\n   */\n  enableBluetooth?(): Promise<SuccessResponse>;\n\n  /**\n   * Accept an incoming call\n   * @returns {Promise<SuccessResponse>} Success status\n   * @example\n   * await StreamCall.acceptCall();\n   */\n  acceptCall(): Promise<SuccessResponse>;\n\n  /**\n   * Reject an incoming call\n   * @returns {Promise<SuccessResponse>} Success status\n   * @example\n   * await StreamCall.rejectCall();\n   */\n  rejectCall(): Promise<SuccessResponse>;\n\n  /**\n   * Check if camera is enabled\n   * @returns {Promise<CameraEnabledResponse>} Camera enabled status\n   * @example\n   * const isCameraEnabled = await StreamCall.isCameraEnabled();\n   * console.log(isCameraEnabled);\n   */\n  isCameraEnabled(): Promise<CameraEnabledResponse>;\n\n  /**\n   * Get the current call status\n   * @returns {Promise<CallEvent>} Current call status as a CallEvent\n   * @example\n   * const callStatus = await StreamCall.getCallStatus();\n   * console.log(callStatus);\n   */\n  getCallStatus(): Promise<CallEvent>;\n\n  /**\n   * Get the current ringing call\n   * @returns {Promise<CallEvent>} Current ringing call status as a CallEvent\n   * @example\n   * const ringingCall = await StreamCall.getRingingCall();\n   * console.log(ringingCall);\n   */\n  getRingingCall?(): Promise<CallEvent>;\n\n\n  /**\n   * Get the current call status\n   * @returns {Promise<CallEvent>} Current call status as a CallEvent\n   * @example\n   * const callStatus = await StreamCall.getCallStatus();\n   * console.log(callStatus);\n   */\n  toggleViews?(): Promise<{ newLayout: string}>;\n\n  toggleCamera?(): Promise<{ status: 'enabled' | 'disable' }>;\n  toggleMicrophone?(): Promise<{ status: 'enabled' | 'disable' }>;\n\n  /**\n   * Set speakerphone on\n   * @param {{ name: string }} options - Speakerphone name\n   * @returns {Promise<SuccessResponse>} Success status\n   * @example\n   * await StreamCall.setSpeaker({ name: 'speaker' });\n   */\n  setSpeaker(options: { name: string }): Promise<SuccessResponse>;\n\n  /**\n   * Switch camera\n   * @param {{ camera: 'front' | 'back' }} options - Camera to switch to\n   * @returns {Promise<SuccessResponse>} Success status\n   * @example\n   * await StreamCall.switchCamera({ camera: 'back' });\n   */\n  switchCamera(options: { camera: 'front' | 'back' }): Promise<SuccessResponse>;\n\n  /**\n   * Get detailed information about an active call including caller details\n   * @param options - Options containing the call ID\n   */\n  getCallInfo(options: { callId: string }): Promise<CallEvent>;\n\n  /**\n   * Set a dynamic Stream Video API key that overrides the static one\n   * @param {{ apiKey: string }} options - The API key to set\n   * @returns {Promise<SuccessResponse>} Success status\n   * @example\n   * await StreamCall.setDynamicStreamVideoApikey({ apiKey: 'new-api-key' });\n   */\n  setDynamicStreamVideoApikey(options: { apiKey: string }): Promise<SuccessResponse>;\n\n  /**\n   * Get the currently set dynamic Stream Video API key\n   * @returns {Promise<DynamicApiKeyResponse>} The dynamic API key and whether it's set\n   * @example\n   * const result = await StreamCall.getDynamicStreamVideoApikey();\n   * if (result.hasDynamicKey) {\n   *   console.log('Dynamic API key:', result.apiKey);\n   * } else {\n   *   console.log('Using static API key from resources');\n   * }\n   */\n  getDynamicStreamVideoApikey(): Promise<DynamicApiKeyResponse>;\n\n  /**\n   * Get the current user's information\n   * @returns {Promise<CurrentUserResponse>} Current user information\n   * @example\n   * const currentUser = await StreamCall.getCurrentUser();\n   * console.log(currentUser);\n   */\n  getCurrentUser(): Promise<CurrentUserResponse>;\n}\n\n/**\n * @interface IncomingCallPayload\n * @description Payload delivered with \"incomingCall\" event (Android lock-screen).\n * @property {string} cid - Call CID (type:id)\n * @property {string} type - Always \"incoming\" for this event\n * @property {CallMember} [caller] - Information about the caller\n */\nexport interface IncomingCallPayload {\n  /** Full call CID (e.g. default:123) */\n  cid: string;\n  /** Event type (currently always \"incoming\") */\n  type: 'incoming';\n  /** Information about the caller */\n  caller?: CallMember;\n  /** Custom data to be passed to the call */\n  custom?: Record<\n    string,\n    | string\n    | boolean\n    | number\n    | null\n    | Record<string, string | boolean | number | null>\n    | string[]\n    | boolean[]\n    | number[]\n  >;\n}\n"]}